####User table

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'parent', 'childminder') NOT NULL,
    profile_picture VARCHAR(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

############Prisma Model

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  role           Role
  profilePicture String?  // Optional field for profile picture URL
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  children       Child[]  // A parent can have multiple children

  @@map("users") // Matches the MySQL table name
}

enum Role {
  admin
  parent
  childminder
}


------------------------------------------------------------------------------------------------------------------------------------------
####Children

CREATE TABLE children (
    id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    gender ENUM('male', 'female', 'other') NOT NULL,
    additional_info TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_id) REFERENCES users(id) ON DELETE CASCADE
);

######Prisma Model
model Child {
  id             Int      @id @default(autoincrement())
  parentId       Int
  name           String
  dateOfBirth    DateTime
  gender         String   @db.Enum("male", "female", "other")
  additionalInfo String?  // Optional field
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  parent         User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

---------------------------------------------------------------------------------------------------------------------------------------------------

###############Bookings Table
CREATE TABLE bookings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT NOT NULL,
    childminder_id INT NOT NULL,
    child_id INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    status ENUM('pending', 'accepted', 'rejected', 'completed') DEFAULT 'pending',
    additional_info TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (childminder_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (child_id) REFERENCES children(id) ON DELETE CASCADE
);

#########Prisma Model

model Booking {
  id            Int      @id @default(autoincrement())
  parentId      Int
  childminderId Int
  childId       Int
  startTime     DateTime
  endTime       DateTime
  status        BookingStatus @default(pending)
  additionalInfo String? // Optional field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  parent        User     @relation("ParentBookings", fields: [parentId], references: [id], onDelete: Cascade)
  childminder   User     @relation("ChildminderBookings", fields: [childminderId], references: [id], onDelete: Cascade)
  child         Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  pending
  accepted
  rejected
  completed
}

---------------------------------------------------------------------------------------------------------------------------------------

###############Messages Tables 

CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    conversation_id INT NOT NULL,
    sender_id INT NOT NULL,
    receiver_id INT NOT NULL,
    content TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE,
    FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (receiver_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE conversations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT NOT NULL,
    childminder_id INT NOT NULL,
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (childminder_id) REFERENCES users(id) ON DELETE CASCADE
);

##########Prisma Tables 

model Conversation {
  id            Int       @id @default(autoincrement())
  parentId      Int
  childminderId Int
  startedAt     DateTime  @default(now())

  // Relations
  parent        User      @relation("ParentConversations", fields: [parentId], references: [id], onDelete: Cascade)
  childminder   User      @relation("ChildminderConversations", fields: [childminderId], references: [id], onDelete: Cascade)
  messages      Message[] // One-to-many relation with messages

  @@map("conversations")
}

model Message {
  id             Int       @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int
  content        String
  sentAt         DateTime  @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

-------------------------------------------------------------------------------------------------------------------------------------------
##########Subscriptions

CREATE TABLE subscriptions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    plan_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status ENUM('active', 'inactive', 'cancelled', 'expired') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


#################Prisma Model

model Subscription {
  id         Int      @id @default(autoincrement())
  userId     Int
  planName   String
  price      Float
  startDate  DateTime
  endDate    DateTime
  status     SubscriptionStatus @default(active)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  active
  inactive
  cancelled
  expired
}

--------------------------------------------------------------------------------------------------------------------------------------------------

########Ratings and Reviews 

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    parent_id INT NOT NULL,
    childminder_id INT NOT NULL,
    booking_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    review TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (childminder_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
);


###################Prisma Models

model Review {
  id            Int      @id @default(autoincrement())
  parentId      Int
  childminderId Int
  bookingId     Int
  rating        Int      @check(rating >= 1 && rating <= 5)
  review        String?  // Optional field for feedback
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  parent        User     @relation("ParentReviews", fields: [parentId], references: [id], onDelete: Cascade)
  childminder   User     @relation("ChildminderReviews", fields: [childminderId], references: [id], onDelete: Cascade)
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

---------------------------------------------------------------------------------------------------------------------------------------------

#################Notifications

CREATE TABLE notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type ENUM('booking', 'message', 'subscription', 'system') NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


#####Prisma 

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  booking
  message
  subscription
  system
}

_______________________________________________________________________________________________________________________________________________

